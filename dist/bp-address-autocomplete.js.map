{"version":3,"file":"bp-address-autocomplete.js","sourceRoot":"","sources":["../src/bp-address-autocomplete.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, html, css } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\nimport { Address } from './address';\nimport {createRef, Ref, ref} from 'lit/directives/ref.js';\n\n@customElement('bp-address-autocomplete')\nexport class BpAddressAutocomplete extends LitElement {\n\n  static override styles = [css`.address{cursor: pointer}`];\n\n  inputRef: Ref<HTMLInputElement> = createRef();\n  \n  /**\n   * Our internal states.\n   */\n  @state()\n  suggestions = [];\n\n  @state()\n  count = 0;\n\n  @state()\n  timeoutId: string | number | NodeJS.Timeout | undefined\n\n  /**\n   * Properties that are passed in props. \n   */\n  @property({ type: Number })\n  timeout = 200;\n\n  @property({ type: String })\n  street = \"\";\n\n  @property({ type: String })\n  houseNumber = \"\";\n\n  @property({ type: String })\n  locality = \"\";\n\n  @property({ type: String })\n  postalCode = \"\";\n\n  @property({ type: String })\n  latitude = \"\";\n\n  @property({ type: String })\n  longitude = \"\";\n\n  @property({ type: String })\n  province = \"\";\n\n  @property({ type: String })\n  boxNumber = \"\";\n\n  /**\n   * This method reacts on click on an address suggestion. There are two possibilities to autocomplete the address : \n   * 1. Is to directly modify the value of the inputs passed in props using the functions below.\n   * 2. An event is sent and we you react to it in the parent component (in your favorite framework).\n   * @param ev \n   */\n  private _onClick(ev: { target: { id: string | number; }; }) {\n    const item: Address = this.suggestions.find((el: Address) => el.id === +ev.target.id)!;\n    const { inputStreet, inputHouseNumber, inputLocality, inputPostalCode, inputLatitude, inputLongitude, inputProvince, inputBoxNumber} = this._getInputs();\n    if (item != undefined) {\n      this._autoComplete(item, inputStreet, inputHouseNumber, inputLocality, inputPostalCode, inputLatitude, inputLongitude, inputProvince, inputBoxNumber);\n      this.inputRef.value!.value = \"\";\n      this.suggestions = []\n    }\n    const itemClick = new CustomEvent(\"onSelectedAddress\", { detail: item });\n    this.dispatchEvent(itemClick)\n  }\n\n  /**\n   * This method allows you to autocomplete the different fields.\n   * @param item \n   * @param inputStreet \n   * @param inputHouseNumber \n   * @param inputLocality \n   * @param inputPostalCode \n   * @param inputLatitude \n   * @param inputLongitude \n   * @param inputProvince \n   */\n  private _autoComplete(item: Address, inputStreet: HTMLInputElement, inputHouseNumber: HTMLInputElement , inputLocality: HTMLInputElement, inputPostalCode: HTMLInputElement, inputLatitude: HTMLInputElement, inputLongitude: HTMLInputElement, inputProvince: HTMLInputElement, inputBoxNumber: HTMLInputElement) {\n    inputStreet != null && (inputStreet.value = item.formatStreetName);\n    inputHouseNumber != null && (inputHouseNumber.value = item.formatHouseNumber);\n    inputLocality != null && (inputLocality.value = item.locality);\n    inputPostalCode != null && (inputPostalCode.value = item.postalCode);\n    inputLatitude != null && (inputLatitude.value = item.latitude.toString());\n    inputLongitude != null && (inputLongitude.value = item.longitude.toString());\n    inputProvince != null && (inputProvince.value = item.formatProvince);\n    inputBoxNumber != null && (inputBoxNumber.value = item.formatBoxNumber); \n  }\n\n  /**\n   * This method retrieves fields closest to the current element.\n   * @returns fields to be autocompleted.\n   */\n  private _getInputs() {\n    const inputStreet = this._nearest(this, this.street);\n    const inputHouseNumber = this._nearest(this, this.houseNumber);\n    const inputLocality = this._nearest(this, this.locality);\n    const inputPostalCode = this._nearest(this, this.postalCode);\n    const inputLatitude = this._nearest(this, this.latitude);\n    const inputLongitude = this._nearest(this, this.longitude);\n    const inputProvince = this._nearest(this, this.province);\n    const inputBoxNumber = this._nearest(this, this.boxNumber);\n    return { inputStreet, inputLocality, inputPostalCode, inputLatitude, inputLongitude, inputHouseNumber, inputProvince, inputBoxNumber};\n  }\n\n  /**\n   * This method returns the element closest to the current element by its id. \n   * @param currentElement \n   * @param id \n   * @returns \n   */\n  private _nearest(currentElement: Element, id: String) {\n    const elements = document.querySelectorAll(`[id=\"${id}\"]`);\n    let minDistance = -1;\n    let closestElement = null;\n  \n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      const distance = Math.abs(currentElement.compareDocumentPosition(element));\n  \n      if (distance > minDistance) {\n        minDistance = distance;\n        closestElement = element;\n      }\n    }\n    return <HTMLInputElement>closestElement;\n  }\n\n  /**\n   * This method reacts to changes in the address. It will send the request to the API with the specified changes.\n   * Request are sent with a delay that can be modified in props to avoid sending request at each change. \n   */\n  private async _changeAddress(event: { target: any; }) {\n    const input = event.target;\n    clearTimeout(this.timeoutId)\n    this.timeoutId = setTimeout(async () => {\n      await this._sendRequest(input);\n    }, this.timeout)\n  }\n\n  private async _sendRequest(input: { value: any; }) {\n    this.count++;\n    await fetch(`https://webservices-pub.bpost.be/ws/ExternalMailingAddressProofingCSREST_v1/address/autocomplete?id=${this.count}&q=${input.value}`, {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'\n      },\n    }).then(response => {\n      if (!response.ok) {\n        this.suggestions = []\n        throw new Error(\"Network response was not OK\");\n      }\n      return response.json();\n    }).then(value => {\n      this.suggestions = value.response.topSuggestions != null ? value.response.topSuggestions.map((item: any, index: Number) => new Address(item, index)) : []\n    }).catch(() => {\n      this.suggestions = []\n    });\n  }\n\n  override render() {\n    return html`\n      <div>\n        <input ${ref(this.inputRef)} @input=${this._changeAddress} type=\"text\" part=\"search-bar\" placeholder=\"Street, city or postcode\" />\n        <ul part=\"ul-suggestions\">\n          ${this.suggestions.map((item: Address) => html`<li id=${item.id} part=\"li-suggestion\" class=\"address\" @click=${this._onClick}>${item.string}</li>`)}\n        </ul>\n      </div>\n      `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'bp-address-autocomplete': BpAddressAutocomplete;\n  }\n}"]}